import streamlit as st
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

# Configura√ß√µes iniciais da p√°gina
st.set_page_config(page_title="TradeMaster AI", layout="wide")
st.title("üìà TradeMaster AI")
st.markdown("Analise ativos em tempo real com sugest√µes inteligentes baseadas no desempenho recente do mercado.")

# Lista de ativos populares (pode personalizar)
ativos_default = ['AAPL', 'GOOG', 'MSFT', 'TSLA', 'AMZN', 'NVDA', 'PETR4.SA', 'VALE3.SA', 'ITUB4.SA']

# Entrada do usu√°rio
st.sidebar.header("Configura√ß√µes")
ativos_usuario = st.sidebar.text_input("Digite os ativos separados por v√≠rgula", ', '.join(ativos_default))
ativos = [a.strip().upper() for a in ativos_usuario.split(',')]

# Tempo atual e recorte de 3 horas
agora = datetime.utcnow()
inicio = agora - timedelta(hours=3)

# Fun√ß√£o para obter dados de cada ativo
def analisar_ativo(ticker):
    try:
        ativo = yf.Ticker(ticker)
        df = ativo.history(interval="5m", start=inicio, end=agora)
        df.dropna(inplace=True)
        preco_atual = df['Close'][-1]
        preco_max = df['High'].max()
        preco_min = df['Low'].min()
        variacao = ((df['Close'][-1] - df['Open'][0]) / df['Open'][0]) * 100

        return {
            'Ativo': ticker,
            'Pre√ßo Atual': round(preco_atual, 2),
            'Melhor Pre√ßo de Venda': round(preco_max, 2),
            'Melhor Pre√ßo de Compra': round(preco_min, 2),
            'Varia√ß√£o (%)': round(variacao, 2)
        }
    except Exception as e:
        return {
            'Ativo': ticker,
            'Erro': str(e)
        }

# Carregando dados
st.subheader("üìä An√°lise de Ativos - √öltimas 3 Horas")
analises = []

with st.spinner("Buscando dados em tempo real..."):
    for ativo in ativos:
        resultado = analisar_ativo(ativo)
        analises.append(resultado)

# Criar DataFrame com os resultados
df_resultado = pd.DataFrame(analises)

# Garantir que a coluna 'Varia√ß√£o (%)' existe antes de filtrar
if 'Varia√ß√£o (%)' in df_resultado.columns:
    df_validos = df_resultado[df_resultado['Varia√ß√£o (%)'].notnull()]
else:
    df_validos = pd.DataFrame()

# Exibir tabela principal
st.dataframe(df_resultado, use_container_width=True)

# Sugest√µes de investimento com base na maior varia√ß√£o positiva
if not df_validos.empty:
    melhores = df_validos.sort_values(by='Varia√ß√£o (%)', ascending=False).head(3)

    st.subheader("üöÄ Melhores oportunidades do momento")
    for i, row in melhores.iterrows():
        st.markdown(f"""
        ### {row['Ativo']}
        - üíµ Pre√ßo atual: R$ {row['Pre√ßo Atual']}
        - üîº Melhor venda: R$ {row['Melhor Pre√ßo de Venda']}
        - üîΩ Melhor compra: R$ {row['Melhor Pre√ßo de Compra']}
        - üìà Varia√ß√£o nas √∫ltimas 3h: {row['Varia√ß√£o (%)']}%
        """)

else:
    st.warning("Nenhum dado v√°lido encontrado. Verifique os s√≠mbolos ou tente novamente mais tarde.")

# Rodap√©
st.markdown("---")
st.caption("Powered by Yahoo Finance ‚Ä¢ Desenvolvido com ‚ù§Ô∏è por TradeMaster AI")

